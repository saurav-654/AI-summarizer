import nodemailer from 'nodemailer';
import { NextResponse } from 'next/server';

export async function POST(request: Request) {
  try {
    const { recipients, subject, content } = await request.json();

    console.log('Email request received:', { recipients, subject: subject || 'AI Generated Summary' });

    if (!recipients || !content) {
      return NextResponse.json(
        { error: 'Recipients and content are required' },
        { status: 400 }
      );
    }

    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASSWORD) {
      console.error('Email credentials not configured');
      return NextResponse.json(
        { error: 'Email service not configured. Please contact administrator.' },
        { status: 500 }
      );
    }

    console.log('Creating transporter with user:', process.env.EMAIL_USER);

    // Create transporter
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      secure: true,
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASSWORD, // App Password
      },
      tls: {
        rejectUnauthorized: false
      }
    });

    // Verify transporter configuration
    try {
      await transporter.verify();
      console.log('✅ SMTP connection verified successfully');
    } catch (verifyError) {
      console.error('❌ SMTP verification failed:', verifyError);
      return NextResponse.json(
        { 
          error: 'Email service configuration error',
          details: 'Please check your email credentials. Make sure you are using an App Password for Gmail.'
        },
        { status: 500 }
      );
    }

    // Clean HTML content for the plain-text version
    const cleanContent = content
      .replace(/<br>/g, '\n')
      .replace(/<strong>(.*?)<\/strong>/g, '**$1**')
      .replace(/<em>(.*?)<\/em>/g, '*$1*')
      .replace(/<[^>]*>/g, ''); // Remove any other HTML tags

    // Email options
    const mailOptions = {
      from: `"AI Summarizer" <${process.env.EMAIL_USER}>`,
      to: recipients,
      subject: subject || 'AI Generated Summary',
      text: cleanContent,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; border-radius: 10px 10px 0 0; text-align: center;">
            <h1 style="color: white; margin: 0; font-size: 24px;">AI Generated Summary</h1>
          </div>
          <div style="background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; border: 1px solid #e9ecef;">
            <div style="background: white; padding: 20px; border-radius: 8px; line-height: 1.6; color: #333;">
              ${content}
            </div>
            <div style="margin-top: 20px; padding: 15px; background: #e3f2fd; border-radius: 8px; font-size: 12px; color: #666;">
              <p style="margin: 0;"><strong>Generated by AI Summarizer</strong></p>
              <p style="margin: 5px 0 0 0;">This summary was created using artificial intelligence. Please review for accuracy.</p>
            </div>
          </div>
        </div>
      `,
    };

    console.log('Sending email to:', recipients);

    // Send email
    const info = await transporter.sendMail(mailOptions);
    console.log('✅ Email sent successfully:', info.messageId);

    return NextResponse.json({
      success: true,
      message: 'Email sent successfully',
      messageId: info.messageId,
    });

  } catch (error) {
    console.error('❌ Error sending email:', error);

    if (error instanceof Error) {
      if (error.message.includes('Invalid login')) {
        return NextResponse.json(
          { 
            error: 'Email authentication failed',
            details: 'Invalid email credentials. Please check your Gmail App Password.'
          },
          { status: 500 }
        );
      }
      if (error.message.includes('ENOTFOUND') || error.message.includes('ECONNREFUSED')) {
        return NextResponse.json(
          { 
            error: 'Network connection failed',
            details: 'Unable to connect to email server. Please check your internet connection.'
          },
          { status: 500 }
        );
      }
    }

    return NextResponse.json(
      { 
        error: 'Failed to send email',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
