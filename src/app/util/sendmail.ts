import { toast } from 'react-toastify';

export interface SendEmailParams {
  emailRecipients: string;
  summary: string;
  setIsSendingEmail: (value: boolean) => void;
}

// Get the correct API URL based on environment
const getApiUrl = (): string => {
  // In development, use localhost
  if (process.env.NODE_ENV === 'development') {
    return 'http://localhost:3000';
  }
  
  // In production, use environment variable or default
  return process.env.NEXT_PUBLIC_API_URL || process.env.URL || 'http://localhost:3000';
};

// Validate email format
const validateEmails = (emails: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  const emailList = emails.split(',').map(email => email.trim());
  return emailList.every(email => emailRegex.test(email));
};

// Create a fallback email sharing function
const createFallbackEmailShare = (recipients: string, summary: string): void => {
  try {
    // Remove HTML tags for plain text email
    const plainTextSummary = summary
      .replace(/<[^>]*>/g, '')
      .replace(/&nbsp;/g, ' ')
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>');

    const subject = encodeURIComponent('AI Generated Summary');
    const body = encodeURIComponent(`Here is the AI-generated summary:\n\n${plainTextSummary}\n\nGenerated by Para Summarizer`);
    
    // Create mailto link
    const mailtoLink = `mailto:${recipients}?subject=${subject}&body=${body}`;
    
    // Try to open default email client
    window.open(mailtoLink, '_blank');
    
    toast("Default email client opened. Please send the email manually if it didn't open automatically.", {
      type: "info",
      autoClose: 5000
    });
  } catch (error) {
    console.error("Error creating mailto link:", error);
    // Copy to clipboard as last resort
    navigator.clipboard.writeText(summary.replace(/<[^>]*>/g, '')).then(() => {
      toast("Email service unavailable. Summary copied to clipboard!", {
        type: "warning"
      });
    }).catch(() => {
      toast("Email service unavailable and couldn't copy to clipboard. Please copy the summary manually.", {
        type: "error"
      });
    });
  }
};

export const shareViaEmail = async ({
  emailRecipients,
  summary,
  setIsSendingEmail
}: SendEmailParams) => {
  if (!emailRecipients.trim() || !summary.trim()) {
    toast("Please enter recipient emails and ensure you have a summary to share.");
    return;
  }

  // Validate email format
  if (!validateEmails(emailRecipients)) {
    toast("Please enter valid email addresses separated by commas.");
    return;
  }

  setIsSendingEmail(true);
  
  // Array of endpoints to try
  const endpoints = [
    `${getApiUrl()}/api/sendEmail`,
    `${getApiUrl()}/api/send-email`,
    '/api/sendEmail',
    '/api/send-email'
  ];

  let lastError: Error | null = null;

  for (const endpoint of endpoints) {
    try {
      console.log(`Trying email endpoint: ${endpoint}`);
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        console.log("Email request timeout triggered");
        controller.abort();
      }, 15000); // Shorter timeout for email

      const response = await fetch(endpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        body: JSON.stringify({
          recipients: emailRecipients,
          subject: "AI Generated Summary",
          content: summary,
        }),
        signal: controller.signal
      });

      clearTimeout(timeoutId);
      console.log(`Email response status for ${endpoint}: ${response.status}`);

      if (!response.ok) {
        if (response.status === 404) {
          console.log(`Email endpoint ${endpoint} not found, trying next...`);
          continue; // Try next endpoint
        }
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
      }

      const contentType = response.headers.get("content-type");
      if (!contentType || !contentType.includes("application/json")) {
        const responseText = await response.text();
        console.error("Non-JSON email response:", responseText);
        throw new Error("Email API returned non-JSON response");
      }

      const data = await response.json();
      console.log("Email response data:", data);

      if (data.success) {
        toast("Email sent successfully!");
        setIsSendingEmail(false);
        return true; // Success, exit function
      } else {
        throw new Error(data.error || "Failed to send email");
      }

    } catch (error) {
      console.error(`Error with email endpoint ${endpoint}:`, error);
      lastError = error instanceof Error ? error : new Error("Unknown error");
      
      // If this is the last endpoint, break to fallback
      if (endpoint === endpoints[endpoints.length - 1]) {
        break;
      }
    }
  }

  // All endpoints failed, use fallback
  console.log("All email endpoints failed, using fallback method");
  console.error("All email endpoints failed. Last error:", lastError);
  
  createFallbackEmailShare(emailRecipients, summary);
  setIsSendingEmail(false);
  return false; // Indicate fallback was used
};

